{"title":"04 - Static Quarto Documents","markdown":{"yaml":{"format":{"revealjs":{"self-contained":true,"slide-number":"c/t","width":1600,"height":900,"logo":"https://www.rstudio.com/wp-content/uploads/2018/10/RStudio-Logo-Flat.png","footer":"[Quarto in 2 Hours](https://jthomasmock.github.io/quarto-in-two-hours/)","css":["theme/theme.css"],"theme":"simple","echo":true}},"editor":"source"},"headingText":"04 - Static Quarto Documents","headingAttr":{"id":"","classes":[],"keyvalue":[["background-image","images/write-something.jpg"],["background-size","cover"],["background-color","black"],["style","font-size: 90px;"]]},"containsRefs":false,"markdown":"\n\n\n## HTML Workhorse\n\n[quarto.org/docs/reference/formats/html](https://quarto.org/docs/reference/formats/html.html)\n\n## Quarto and RMarkdown\n\n- Basic RMarkdown documents that render to static HTML and PDF are the most transferable directly to Quarto\n\n. . .\n\n:::: columns\n\n::: {.column width=\"50%\"}\n\n### R Markdown\n\n```yaml\ntitle: \"My Document\"\noutput:\n  html_document:\n    toc: true\n    number_sections: true\n    css: styles.css\n```    \n:::\n\n::: {.column width=\"50%\"}\n\n### Quarto\n\n```yaml\ntitle: \"My Document\"\nformat:\n  html:\n    toc: true\n    number-sections: true\n    css: styles.css\n```\n\n:::\n\n::::\n\n. . .\n\n<br>\n\n> One source of the difference in syntax is that Quarto is more closely aligned with Pandoc format names and options (thus the use of - as a word separator rather than _).\n\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Our turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n- Open `materials/workshop/04-static/old-rmarkdown.rmd`\n- Render via Quarto CLI\n\n## Static documents\n\n- A static document is your \"daily driver\" - has the power for a complex table of contents, figure alignment, control of ouptut/code, and other niceties\n- Useful as a lab notebook, scratchpad, or the final output for your team\n\n## Table of contents and Sections\n\nTable of contents (ToC) and sections are useful for breaking up longer documents.\n\n- Quarto will automatically build a ToC for level 3 headers and above but you can control this with:\n\n```yaml\ntoc-depth: 4\n```\n\nor \n\n```yaml\ntoc-depth: 2\n```\n\n## Tabsets\n\nSplit up and flip between sections of a page, alternative to just two columns\n\n```\n::: {.panel-tabset}\n\n## Element 1\n\n## Element 2\n\n:::\n```\n\n## Tabsets\n\n::: {.panel-tabset}\n\n## Code\n\n```{r}\n#| echo: fenced\n#| eval: false\nhead(mtcars)\n```\n\n\n## Output\n\n```{r}\n#| eval: true\n#| echo: false\nhead(mtcars)\n```\n\n:::\n\n## Tabsets\n\n````\n\n::: {.panel-tabset}\n\n## Code\n\n```{{r}}\n#| echo: fenced\n#| eval: false\nhead(mtcars)\n```\n\n\n## Output\n\n```{{r}}\n#| eval: true\n#| echo: false\nhead(mtcars)\n```\n\n:::\n````\n\n# Code {background-color=\"#4f6952\"}\n\n## Hide all code\n\n```yaml\nformat: html\nexecute:\n  echo: false\n```\n\n. . .\n\nTurn back on at individual code-block level:\n\n```r\n#| echo: true\n```\n\n## Fold code\n\n```yaml\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Hidden code\"\n```\n\n. . .\n\nTurn on at individual code-block level:\n\n```r\n#| code-fold: true\n#| code-summary: \"Hidden code\"\n```\n\n## Code tools\n\n```yaml\nformat:\n  html:\n    code-fold: true\n    code-tools: true\n```\n\n. . .\n\n![](https://quarto.org/docs/output-formats/images/code-tools-01.png)\n\n## Code tools, source\n\n> For example, here we specify that we want only “View Source” (no toggling of code visibility) and no caption on the code menu:\n\n```yaml\nformat:\n  html: \n    code-tools:\n      source: true\n      toggle: false\n      caption: none\n```\n\n. . .\n\n![](https://quarto.org/docs/output-formats/images/code-tools-source.png)\n\n## Code tools, source repo\n\nIn some situations (especially for longer documents), you may prefer to send viewers to the source code on a version-control website rather than the built in viewer.\n\n. . .\n\n```yaml\nformat:\n  html: \n    code-tools:\n      source: https://github.com/quarto-dev/quarto-web/blob/main/index.md\n```\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Our turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n- Open `materials/workshop/04-static/penguin-report.qmd`\n- Explore the document as a concept of literate programming or a \"lab notebook\"\n- Change the code to all fold, render\n- Change the code to source and toggle\n\n## Code linking with [`downlit`](https://downlit.r-lib.org/)\n\n> The goal of `downlit` is to provide syntax highlighting and automatic linking of R code\n\n```yaml\nformat:\n  html:\n    code-link: true\n```\n\n# Aesthetics {background-image=\"images/howard-gentleman.jpg\" background-size=\"contain\" background-position=\"right\" background-color=\"black\"}\n\n## HTML Appearance\n\nOut of the box, Quarto is styled with Bootstrap 5 and opinionated defaults.\n\nBootstrap is the most popular CSS Framework for responsive websites, where v5 is the latest.\n\n. . .\n\nQuarto comes pre-installed with 25 themes from [Bootswatch](https://bootswatch.com/) and you can use them like so:\n\n```yaml\n---\nformat:\n  html:\n    theme: litera\n---\n```\n\n<br>\n\n. . .\n\nOr you can customize a theme with CSS/SCSS/SASS.\n\n```yaml\n---\nformat:\n  html:\n    theme: \n      - litera\n      - custom.scss\n---\n```\n\n## Bootswatch themes\n\n<iframe src=\"https://bootswatch.com/\" height=\"900\" width=\"1200\"></iframe>\n\n## Bootswatch: lumen\n\n<iframe src=\"https://bootswatch.com/lumen/\" height=\"900\" width=\"1200\"></iframe>\n\n## Bootswatch: litera\n\n<iframe src=\"https://bootswatch.com/litera/\" height=\"900\" width=\"1200\"></iframe>\n\n## Bootswatch: flatly\n\n<iframe src=\"https://bootswatch.com/flatly/\" height=\"900\" width=\"1200\"></iframe>\n\n## Bootswatch: sketchy\n\n<iframe src=\"https://bootswatch.com/sketchy/\" height=\"900\" width=\"1200\"></iframe>\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Our turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n- Open `materials/workshop/04-static/bootswatch-themed.qmd` and try out some themes!\n- 25 bootswatch themes\n- https://quarto.org/docs/output-formats/html-themes.html\n- https://quarto.org/docs/output-formats/html-themes-more.html\n\n## CSS\n\nCSS = Cascading Style Sheets:\n\n> CSS is a language for specifying how documents are presented to users — how they are styled, laid out, etc [mdn web docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/What_is_CSS)\n\n. . .\n\nHTML structures the page, CSS styles it\n\n. . .\n\n```html\n<div style=\"color: red; font-size: 100px;\">Some text</div>\n```\n\n. . .\n\n<div style=\"color: red; font-size: 35px;\">Some text</div>\n\n. . .\n\nCSS can also bring in additional resources, like new fonts!\n\n```{css}\n@import url('https://fonts.googleapis.com/css2?family=Fira+Mono&display=swap');\n```\n\n\n## Inline css\n\n```\n:::{style=\"color: white; font-size: 150px; background-color:#d3d3d3;\"}\nText\n:::\n```\n\n. . .\n\n:::{style=\"color: white; font-size: 150px; background-color:#d3d3d3;\"}\nText\n:::\n\n. . .\n\n```\nSome text with [dplyr code]{style=\"font-family: 'Fira Mono !important'; background-color:#d3d3d3;\"} and more text.\n```\n\n. . .\n\nSome text with [code]{style=\"font-family: 'Fira Mono'; background-color:#d3d3d3;\"} and more text.\n\n## CSS Class\n\n```{css}\n.big-text {\n  font-size: 150px;\n  color: blue;\n}\n```\n\n```\n::: {.big-text}\n- Big text\n- Still big\n:::\n\n- Smol text\n```\n\n::: {.big-text}\n- Big text\n- Still big\n:::\n\n- Smol text\n\n## Class + spans\n\n```\nHere is some [big text]{.big-text} and some small text.\n```\n\nHere is some [big text]{.big-text} and some small text.\n\n## `format: PDF`\n\nTIP!\n- pandoc divs/spans are generally transferrable\n- CSS is _not_ transferable\n- Lean on Quarto/Pandoc tooling and then reach for raw CSS/LaTeX\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Our turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n- Open `materials/workshop/01-intro/history.qmd`\n- Render as HTML and then render as PDF\n"},"formats":{"revealjs":{"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","self-contained":true,"css":["theme/theme.css"],"output-file":"04-static-documents.html"},"language":{},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.2.335","auto-stretch":true,"editor":"source","slideNumber":"c/t","width":1600,"height":900,"logo":"https://www.rstudio.com/wp-content/uploads/2018/10/RStudio-Logo-Flat.png","footer":"[Quarto in 2 Hours](https://jthomasmock.github.io/quarto-in-two-hours/)","theme":"simple"}}}}