{"title":"02 - Authoring Quarto","markdown":{"yaml":{"format":{"revealjs":{"self-contained":true,"slide-number":true,"width":1600,"height":900,"logo":"https://www.rstudio.com/wp-content/uploads/2018/10/RStudio-Logo-Flat.png","footer":"[Quarto in 2 Hours](https://jthomasmock.github.io/quarto-in-two-hours/)","css":["theme/theme.css"],"theme":"simple"}},"editor":"source","execute":{"echo":true}},"headingText":"02 - Authoring Quarto","headingAttr":{"id":"","classes":[],"keyvalue":[["background-color","#447099"],["background-image","images/typewriter.jpg"],["background-size","cover"]]},"containsRefs":false,"markdown":"\n\n\n## Quarto, anatomy\n\n1.  Metadata: YAML\n\n2.  Text: Markdown\n\n3.  Code: `knitr` or `jupyter`\n\n. . .\n\nAdd it all together, and you have beautiful, powerful, and useful outputs!\n\n```{r include=FALSE}\nlibrary(tidyverse)\n```\n\n\n## Literate programming\n\n> Literate programming is writing out the program logic in a human language with included (separated by a primitive markup) code snippets and macros. - [Wikipedia](https://en.wikipedia.org/wiki/Literate_programming)\n\n    ---\n    title: \"ggplot2 demo\"\n    date: \"5/22/2021\"\n    format: html\n    ---\n\n    ## Air Quality\n\n    There is a relationship between temperature and the ozone level.\n\n    ```{{r}}\n    #| label: fig-airquality\n    library(ggplot2)\n    ggplot(airquality, aes(Temp, Ozone)) + \n      geom_point() + \n      geom_smooth(method = \"loess\"\n    )\n    ```\n\n. . .\n\n::: {style=\"background: #a13c6530; width: 400px; height: 145px; margin: 5px; position: absolute; top: 245px; left: 0px;\"}\n:::\n\n. . .\n\n::: {style=\"background: #fa551c30; width: 900px; height: 110px; margin: 5px; position: absolute; top: 405px; left: 0px;\"}\n:::\n\n. . .\n\n::: {style=\"background: #6a9c4230; width: 550px; height: 210px; margin: 5px; position: absolute; top: 520px; left: 0px;\"}\n:::\n\n# 1 Metadata {background-color=\"#a13c65\"}\n\n## Metadata: YAML\n\n\"Yet Another Markup Language\" or \"YAML Ain't Markup Language\"\n\n``` yaml\n---\nkey: value\n---\n```\n\n## Output Options\n\n``` yaml\n---\nformat: something\n---\n```\n\n. . .\n\n``` yaml\n---\nformat: html\n---\n```\n\n``` yaml\n---\nformat: pdf\n---\n```\n\n``` yaml\n---\nformat: revealjs\n---\n```\n\n. . .\n\nThen add option arguments!\n\n``` yaml\n---\nformat: \n  html:\n    toc: true\n    code-fold: true\n---\n```\n\n. . .\n\nSub-options should be below the main format output and spacing matters!\n\n``` yaml\n---\nformat: \n  html:\n    option1: text\n    option2: logical\n---\n```\n\n## YAML for `format: html`\n\n</iframe>\n\n## YAML is sensitive\n\n``` yaml\n---\nformat:html # invalid, no space between\n---\n\n---\nformat: # invalid, read as missing\nhtml\n---\n\n---\nformat: \n  html: # valid but needs next object\n---\n```\n\n. . .\n\nValid YAML can look a bit differently based on what all is needed\n\n``` yaml\nformat: html # valid - there's a space\n\nformat:\n  html # valid - there's 2x spaces on a new line and no trailing :\n\n# valid - format = HTML with selections made\nformat: \n  html:\n    toc: true\n```\n\n## Why YAML?\n\nTo avoid manually typing out all the options, every time!\n\n. . .\n\n```bash\nquarto render document.qmd --to html\n```\n\n<br>\n\n. . .\n\n```bash\nquarto render document.qmd --to html -M code fold:true\n```\n\n<br>\n\n. . .\n\n```bash\nquarto render document.qmd --to html -M code-fold:true -P alpha:0.2 -P ratio:0.3\n```\n\n# Demo: Navigating within RStudio {background-color=\"black\"}\n\n## Quarto workflow\n\nExecuting the Quarto Render button in RStudio will call Quarto render in a background job - this will prevent Quarto rendering from cluttering up the R console, and gives you and easy way to stop.\n\n![](images/background-job.png)\n\n## Rendering\n\n1. Render in RStudio, starts a background job and previews the output  \n\n![](https://quarto.org/docs/tools/images/rstudio-render.png)\n\n. . .\n\n2. System shell via `quarto render`\n\n```{bash}\n#| eval: false\n#| echo: true\nquarto render document.qmd # defaults to html\nquarto render document.qmd --to pdf\nquarto render document.qmd --to docx\n```\n\n- Renders via terminal\n\n. . .\n\n3. R console via `quarto` R package\n\n```{r}\n#| eval: false\n#| echo: true\nlibrary(quarto)\nquarto_render(\"document.qmd\") # defaults to html\nquarto_render(\"document.qmd\", output_format = \"pdf\")\n```\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Our Turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n- Open RStudio and `materials/workshop/visual-editor.qmd`\n- Compare behavior of rendering from RStudio > Render, using the CLI with `quarto render`, and in R console via `quarto::quarto_render()`\n\n## Quarto linting\n\n> Lint, or a linter, is a static code analysis tool used to flag programming errors, bugs, stylistic errors and suspicious constructs. - [Lint](https://en.wikipedia.org/wiki/Lint_(software)#:~:text=Lint%2C%20or%20a%20linter%2C%20is,examined%20C%20language%20source%20code.)\n\n. . .\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/lint-rstudio.png)\n:::\n\n::: {.column width=\"50%\"}\n![](images/lint-vscode.png)\n:::\n:::\n\n## Quarto YAML Intelligence\n\nRStudio + VSCode provide rich tab-completion - start a word and tab to complete, or <kbd>`Ctrl + space`</kbd> to see all available options.\n\n![](images/quarto-tab-complete.png)\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Our turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n-   Open a new Quarto document in RStudio\n-   Try <kbd>`Ctrl + space`</kbd> to see the available YAML options\n-   Try out the tab-completion of any options you remember\n\n## HTML options\n\n[quarto.org/docs/reference/formats/html](https://quarto.org/docs/reference/formats/html.html)\n\nYou can use the [HTML reference](https://quarto.org/docs/reference/formats/html.html) if needed.\n\n# Text & Markdown {background-color=\"#fa551c70\"}\n\n## Lists {.smaller}\n\n+-------------------------------------+---------------------------------+\n| Markdown Syntax                     | Output                          |\n+=====================================+=================================+\n|     * unordered list                | -   unordered list              |\n|         + sub-item 1                |                                 |\n|         + sub-item 2                |     -   sub-item 1              |\n|             - sub-sub-item 1        |                                 |\n|                                     |     -   sub-item 2              |\n|                                     |                                 |\n|                                     |         -   sub-sub-item 1      |\n+-------------------------------------+---------------------------------+\n|     *   item 2                      | -   item 2                      |\n|                                     |                                 |\n|         Continued (indent 4 spaces) |     Continued (indent 4 spaces) |\n+-------------------------------------+---------------------------------+\n|     1. ordered list                 | 1.  ordered list                |\n|     2. item 2                       |                                 |\n|         i) sub-item 1               | 2.  item 2                      |\n|              A.  sub-sub-item 1     |                                 |\n|                                     |     i.  sub-item 1              |\n|                                     |                                 |\n|                                     |         A.  sub-sub-item 1      |\n+-------------------------------------+---------------------------------+\n|     (@)  A list whose numbering     | 1.  A list whose numbering      |\n|                                     |                                 |\n|     continues after                 | continues after                 |\n|                                     |                                 |\n|     (@)  an interruption            | 2.  an interruption             |\n+-------------------------------------+---------------------------------+\n|     term                            | **term**                        |\n|     : definition                    |                                 |\n|                                     | :   definition                  |\n+-------------------------------------+---------------------------------+\n\n## Text Formatting\n\n+-----------------------------------+-------------------------------+\n| Markdown Syntax                   | Output                        |\n+===================================+===============================+\n|     *italics* and **bold**        | *italics* and **bold**        |\n+-----------------------------------+-------------------------------+\n|     superscript^2^ / subscript~2~ | superscript^2^ / subscript~2~ |\n+-----------------------------------+-------------------------------+\n|     ~~strikethrough~~             | ~~strikethrough~~             |\n+-----------------------------------+-------------------------------+\n|     `verbatim code`               | `verbatim code`               |\n+-----------------------------------+-------------------------------+\n\n## Headings\n\n+---------------------+-----------------+\n| Markdown Syntax     | Output          |\n+=====================+=================+\n|     # Header 1      | # Header 1      |\n+---------------------+-----------------+\n|     ## Header 2     | ## Header 2     |\n+---------------------+-----------------+\n|     ### Header 3    | ### Header 3    |\n+---------------------+-----------------+\n|     #### Header 4   | #### Header 4   |\n+---------------------+-----------------+\n|     ##### Header 5  | ##### Header 5  |\n+---------------------+-----------------+\n|     ###### Header 6 | ###### Header 6 |\n+---------------------+-----------------+\n\n## Links\n\n- There are several types of \"links\" or hyperlinks.\n\n::: columns\n::: {.column width=\"50%\"}\n#### Markdown\n```markdown\nYou can embed [named hyperlinks](https://quarto.org/),\ndirect urls like <https://quarto.org/>, and links to \n[other places](#quarto-anatomy) in \nthe document. The syntax is similar for embedding an\ninline image: ![Boston terrier](images/howard-gentleman.jpeg){fig-alt=\"A boston terrier's dressed up like a victorian gentleman\"}.\n```\n:::\n::: {.column width=\"50%\" .fragment}\n#### Output\nYou can embed [named hyperlinks](https://quarto.org/),\ndirect urls like <https://quarto.org/>, and links to  [other places](#quarto-anatomy) in \nthe document. The syntax is similar for embedding an inline image:  \n![Boston terrier](images/howard-gentleman.jpeg){style=\"width:250px;\" fig-alt=\"A boston terrier's dressed up like a victorian gentleman\"}\n:::\n:::\n\n## Tables\n\n::: columns\n::: {.column width=\"50%\"}\n    | Right | Left | Default | Center |\n    |------:|:-----|---------|:------:|\n    |   12  |  12  |    12   |    12  |\n    |  123  |  123 |   123   |   123  |\n    |    1  |    1 |     1   |     1  |\n:::\n\n::: {.column width=\"50%\" .fragment}\n| Right | Left | Default | Center |\n|------:|:-----|---------|:------:|\n|    12 | 12   | 12      |   12   |\n|   123 | 123  | 123     |  123   |\n|     1 | 1    | 1       |   1    |\n:::\n:::\n\n## Tables from code\n\n`knitr` itself can turn R dataframes into tables with `knitr::kable()`\n\n> A very simple table generator, and it is simple by design. It is not intended to replace any other R packages for making tables. . . .\n\n```{r}\nhead(mtcars) |> \n  knitr::kable()\n```\n\n\n## Quotes\n\n> Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do. - Donald Knuth, Literate Programming ^[\"Literate Programming\", The Computer Journal 27 (1984), p. 97. (Reprinted in Literate Programming, 1992, p. 99.) Literate Programming (1984)]\n\n. . .\n\n```markdown\n> Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do. - Donald Knuth, Literate Programming\n```\n\n. . .\n\n> I like dogs  \n> And I like cats\n\n. . .\n\n```markdown\n> I like dogs\n> And I like cats\n```\n\n# Code\n\n## Anatomy of a code chunk\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n````md\n```{{r}}\n#| label: car-stuff\n#| echo: false\nmtcars %>% \n  distinct(cyl)\n```\n````\n\n:::\n\n::: {.column width=\"50%\" .fragment}\n\n- Has 3x backticks on each end ```` ``` ````  \n- Indicate engine (`r`) between curly braces `{r}`  \n- Place options underneath, behind the `#|` (hashpipe): `#| option1: value`  \n\n:::\n\n::::\n\n## Divs and Spans\n\nPandoc and therefore Quarto can parse [\"fenced `Div` blocks\"](https://pandoc.org/MANUAL.html#divs-and-spans)\n\n. . .\n\n    ::: {.border}\n    This content can be styled with a border\n    :::\n\n. . .\n\n::: {style=\"border-left:10px solid red\"}\nThis content can be styled with a border\n:::\n\n    This is text with [special]{style=\"color:red;\"} formatting.\n\n. . .\n\nThis is text with [special]{style=\"color:red;\"} formatting.\n\n. . .\n\nYou're not limited to HTML/CSS concepts - Pandoc and Quarto also have \"attributes\" that can be assigned in this way.\n\n### Divs and Spans\n\n-   You can think of a `:::` div as a HTML `<div>` but it can also apply in specific situations to content in PDF\n-   Similarly, `[text]{.class}` spans can be thought of a `<span .class>Text</span>` but again are a bit more transferable if using Pandoc/Quarto native attributes.\n\n. . .\n\nThe following, if specifying a Quarto class can often apply between formats.\n\n``` code\n::: {.unnumbered .unlisted}\nText\n:::\n```\n\n. . .\n\nWhile the following is hard-coded as HTML.\n\n``` html\n<div style=\"font-size: 200px;\">Text</div>\n```\n\n## Callout Blocks\n\n    :::{.callout-note}\n    Note that there are five types of callouts, including: \n    `note`, `tip`, `warning`, `caution`, and `important`.\n    :::\n\n::: callout-note\n## Note\n\nNote that there are five types of callouts, including: `note`, `tip`, `warning`, `caution`, and `important`.\n:::\n\n::: callout-warning\n## Warning\n\nCallouts provide a simple way to attract attention, for example, to this warning.\n:::\n\n::: callout-important\n## This is important\n\nDanger, callouts will really improve your writing.\n:::\n\n::: callout-tip\n## Tip with caption\n:::\n\n::: callout-caution\n## Caution, under construction\n\nHere is something under construction\n:::\n\n## Callout markdown syntax\n\n    :::{.callout-note}\n    Note that there are five types of callouts, including:\n    `note`, `warning`, `important`, `tip`, and `caution`.\n    :::\n\n\n    :::{.callout-tip}\n    ## Tip With Caption\n\n    This is an example of a callout with a caption.\n    :::\n\n<br> <br>\n\n    :::{.callout-caution collapse=\"true\"}\n    ## Expand To Learn About Collapse\n\n    This is an example of a 'folded' caution callout that can be expanded by the user. You can use `collapse=\"true\"` to collapse it by default or `collapse=\"false\"` to make a collapsible callout that is expanded by default.\n    :::\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Our turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n-   Open `materials/workshop/02-authoring/callout-boxes.qmd`\n-   Try changing the types of callouts/remove them from code boxes and then render\n-   Open `materials/workshop/02-authoring/callout-pdf.qmd` and render it as well\n\n## Figures\n\nBasic markdown syntax:\n\n    ![Boston Terrier](images/boston-terrier.png)\n\n![Boston Terrier](images/boston-terrier.png)\n\n## Figures w/ code\n\n```{r}\n#| echo: fenced\n#| fig-width: 4\n#| fig-align: right\n\nknitr::include_graphics(\"images/howard-gentleman.jpeg\")\n```\n\n## Fragments/spans\n\n::: columns\n::: {.column width=\"50%\"}\n    ![Boston terrier](images/boston-terrier.png){fig-align=\"left\"}\n\n![](images/boston-terrier.png)\n:::\n\n::: {.column width=\"50%\"}\n    ![](images/boston-terrier.png){fig-align=\"right\" fig-alt=\"A photo a Boston Terrier.\"}\n\n![](images/boston-terrier.png){fig-align=\"right\" fig-alt=\"A photo a Boston Terrier.\"}\n:::\n:::\n\n## Subfigures fenced div class\n\n    ::: {#fig-bostons layout-ncol=2}\n\n    ![Excited](images/boston-terrier.png){#fig-boston width=\"250px\"}\n\n    ![Sleeping](images/boston-sleep.png){#fig-sleep width=\"250px\"}\n\n    Two states of Howard\n\n    :::\n\n## Subfigures\n\n::: {#fig-bostons layout-ncol=\"2\"}\n![Excited](images/boston-terrier.png){#fig-boston width=\"250px\"}\n\n![Sleeping](images/boston-sleep.png){#fig-sleep width=\"250px\"}\n\nTwo states of Howard\n:::\n\n## Subfigures\n\n<iframe src=\"https://jthomasmock.github.io/quarto-in-two-hours/materials/static/sub-figure.html\" height=\"800px\" width=\"1200px\">\n\n</iframe>\n\n\n## Subfigures\n\n    ::: {#fig-bostons layout-nrow=2}\n\n    ![Excited](images/boston-terrier.png){#fig-boston width=\"250px\"}\n\n    ![Sleeping](images/boston-sleep.png){#fig-sleep width=\"250px\"}\n\n    ![Still Excited](images/boston-terrier.png){#fig-boston width=\"250px\"}\n\n    ![Still sleeping](images/boston-sleep.png){#fig-sleep width=\"250px\"}\n\n    :::\n\n## Subfigures\n\n::: {layout-nrow=\"2\"}\n![Excited](images/boston-terrier.png){width=\"250px\"}\n\n![Sleeping](images/boston-sleep.png){width=\"250px\"}\n\n![Still Excited](images/boston-terrier.png){width=\"250px\"}\n\n![Still sleeping](images/boston-sleep.png){width=\"250px\"}\n:::\n\nTwo states of Howard, twice\n\n## Subfigures\n\n    ::: {layout-ncol=\"2\"}\n    ![Excited](images/boston-terrier.png){width=\"250px\"}\n\n    ![Sleeping](images/boston-sleep.png){width=\"250px\"}\n\n    ![Still Excited](images/boston-terrier.png){width=\"250px\"}\n\n    ![Still sleeping](images/boston-sleep.png){width=\"250px\"}\n\n    Two states of Howard, twice\n    :::\n\n::: {layout-ncol=\"2\"}\n![Excited](images/boston-terrier.png){width=\"250px\"}\n\n![Sleeping](images/boston-sleep.png){width=\"250px\"}\n\n![Still Excited](images/boston-terrier.png){width=\"250px\"}\n\n![Still sleeping](images/boston-sleep.png){width=\"250px\"}\n\nTwo states of Howard, twice\n:::\n\n## Diagrams w/ `mermaid`\n\n```{mermaid, echo=TRUE}\nflowchart LR\n  A[Hard edge] --> B(Round edge)\n  B --> C{Decision}\n  C --> D[Result one]\n  C --> E[Result two]\n```\n"},"formats":{"revealjs":{"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","self-contained":true,"css":["theme/theme.css"],"output-file":"02-authoring.html"},"language":{},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.2.335","auto-stretch":true,"editor":"source","slideNumber":true,"width":1600,"height":900,"logo":"https://www.rstudio.com/wp-content/uploads/2018/10/RStudio-Logo-Flat.png","footer":"[Quarto in 2 Hours](https://jthomasmock.github.io/quarto-in-two-hours/)","theme":"simple"}}}}