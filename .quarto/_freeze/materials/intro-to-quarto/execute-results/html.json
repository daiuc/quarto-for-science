{
  "hash": "46a4ef6c07c0c174be4c26f8aba2f49e",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    slide-number: true\n    width: 1500\n    height: 1000\n    footer: \"[Quarto for Science]\"\n    css: [\"theme/theme.css\"]\n    theme: simple\neditor: source\n---\n\n\n##  {background-image=\"images/chuttersnap-UmncJq4KPcA-unsplash.jpg\" background-position=\"left\"}\n\n\n<h1>Quarto for Science</h1>\n\n<br>\n\n<h2>Reproducible Data Analysis</h2>\n\n<h3>\n2023-04-18\n</h3>\n\n<br>\n\n::: footer\n\n:::\n\n## We will learn\n\n<br><br>\n\n> What is reproducible data analysis?\n\n. . . \n\n> Why you should learn Quarto for science!\n\n\n## What is reproducible data analysis?\n\n\\\nTo achieve reproducible research we need reproducible analysis!\n\n\\\n\nThat means you need: \n\n> reproducible environment\n\n\n> version control\n\n> clear documentation\n\n> automated work flow ...\n\n## But really, you just want to know: \n\n\\\n\n> what the heck did I do last week?\n \n> where did my data go?\n\n> I thought I already did this analysis, but how?\n\n\n## Hello Quarto\n\n> Quarto is an open-source scientific and technical publishing system built on [Pandoc](https://pandoc.org/)\n\n> If you haven't heard of Quarto, perhaps you know about rstudio\n\n\\\n\\\n\n<h2>Literate Programming</h2>\n\n> You can weave together narrative text and code in one document (`.qmd`) to produce multiple output as pdf, word documents, web pages, blog posts, presentation slides, thesis, books and more.\n\n\n\n## What is Quarto?\n\n> Quarto® is an open-source scientific and technical publishing system built on Pandoc\n\n> A Quarto document i.e. a `.qmd` is a plain text file, like a `.rmd`, that can be rendered to many different formats\n\n![](https://quarto.org/docs/get-started/hello/images/rstudio-source-visual.png){width=\"1200px\" fig-align=\"center\" fig-alt=\"A screenshot of a Visual and Source Quarto document\"}\n\n## You can write in one .qmd file but output in multiple format simutaneously!\n\\\n\\\nUseful formats for scientific writing: \n\n* html (publish your analysis on GitHub!)\n* pdf (publish that paper in Nature!)\n* book (ready for your thesis?)\n\n\n\n\n\n\n## Anatomy of a Quarto document\n\n-   Metadata (YAML)\n\n``` yaml\n---\nformat: html\n---\n```\n\n. . .\n\n-   Code\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| eval: true\nlibrary(dplyr)\nmtcars %>% \n  group_by(cyl) %>%\n  summarize(mean = mean(mpg), .groups = \"drop\")\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n    cyl  mean\n  <dbl> <dbl>\n1     4  26.7\n2     6  19.7\n3     8  15.1\n```\n:::\n:::\n\n\n. . .\n\n-   Text\n\n``` markdown\n# Heading 1\nThis is a sentence with some **bold text**, some *italic text* and an [image](image.png).\n```\n\n## Metadata: YAML\n\nThe [YAML](https://yaml.org/) metadata or header is:\n\n> processed in many stages of the rendering process and can influence the final document in many different ways. It is placed at the very beginning of the document and is read by each of Pandoc, Quarto and `knitr`. Along the way, the information that it contains can affect the code, content, and the rendering process.\n\n## YAML\n\n``` yaml\n---\ntitle: \"My Document\"\nformat: \n  html:\n    toc: true\n    code-fold: true\n---\n```\n\n## Markdown\n\n> Quarto is based on Pandoc and uses its variation of markdown as its underlying document syntax. Pandoc markdown is an extended and slightly revised version of John Gruber's [Markdown](https://daringfireball.net/projects/markdown/) syntax.\n\n. . .\n\n> Markdown is a plain text format that is designed to be easy to write, and, even more importantly, easy to read\n\n## Text Formatting\n\n+-----------------------------------+-------------------------------+\n| Markdown Syntax                   | Output                        |\n+===================================+===============================+\n| ```                               | *italics* and **bold**        |\n| *italics* and **bold**            |                               |\n| ```                               |                               |\n+-----------------------------------+-------------------------------+\n| ```                               | superscript^2^ / subscript~2~ |\n| superscript^2^ / subscript~2~     |                               |\n| ```                               |                               |\n+-----------------------------------+-------------------------------+\n| ```                               | ~~strikethrough~~             |\n| ~~strikethrough~~                 |                               |\n| ```                               |                               |\n+-----------------------------------+-------------------------------+\n| ```                               | `verbatim code`               |\n| `verbatim code`                   |                               |\n| ```                               |                               |\n+-----------------------------------+-------------------------------+\n\n## Headings\n\n+--------------------+-----------------+\n| Markdown Syntax    | Output          |\n+====================+=================+\n| ```                | # Header 1      |\n| # Header 1         |                 |\n| ```                |                 |\n+--------------------+-----------------+\n| ```                | ## Header 2     |\n| ## Header 2        |                 |\n| ```                |                 |\n+--------------------+-----------------+\n| ```                | ### Header 3    |\n| ### Header 3       |                 |\n| ```                |                 |\n+--------------------+-----------------+\n| ```                | #### Header 4   |\n| #### Header 4      |                 |\n| ```                |                 |\n+--------------------+-----------------+\n| ```                | ##### Header 5  |\n| ##### Header 5     |                 |\n| ```                |                 |\n+--------------------+-----------------+\n| ```                | ###### Header 6 |\n| ###### Header 6    |                 |\n| ```                |                 |\n+--------------------+-----------------+\n\n## Code\n\n\n::: {.cell output-location='column'}\n\n````{.cell-code}\n```{{r}}\n#| output-location: column\n#| label: fig-airquality\n#| fig-cap: Temperature and ozone level.\n#| warning: false\n\nlibrary(ggplot2)\n\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\"\n)\n```\n````\n\n::: {.cell-output-display}\n![Temperature and ozone level.](intro-to-quarto_files/figure-revealjs/fig-airquality-1.png){#fig-airquality width=960}\n:::\n:::\n\n\n## Code, more than just R\n\n::: columns\n::: {.column width=\"50%\"}\n```` python\n```{{python}}\n#| label: fig-polar\n#| fig-cap: \"A line plot on a polar axis\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n````\n:::\n\n::: {.column width=\"50%\"}\n![](images/polar-axis.png){width=\"650px\"}\n:::\n:::\n\n## Rendering\n\n1.  Render in RStudio\n\n![](https://quarto.org/docs/tools/images/rstudio-render.png){fig-alt=\"A screenshot of the render button in RStudio\"}\n\n. . .\n\n2.  System shell via `quarto render`\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nquarto render document.qmd # defaults to html\nquarto render document.qmd --to pdf\nquarto render document.qmd --to docx\n```\n:::\n\n\n\n## Results\n\n::: {.panel-tabset}\n\n### pdf - paper\n\n![](images/pdf-eg1.png)\n\n\n### website\n\n![](images/web-eg1.png)\n\n\n### pdf - cv\n\n![](images/cv-pic.png)\n\n:::\n\n::: footer\n\n:::\n\n\n## \n\n<h1>To recap</h1>\n\n\\\n\\\n\n<h3> Quick demo </h3>\n\n. . . \n\n\\\n\n<h3>Hopefully, I convinvced you to learn quarto and literate programming to make your research more reproducible.</h3>\n\n\n## \n\n<h1>Thank you!</h1>\n\n\n\n",
    "supporting": [
      "intro-to-quarto_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}